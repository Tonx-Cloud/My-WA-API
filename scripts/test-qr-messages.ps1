#!/usr/bin/env pwsh
# ==========================================
# MY-WA-API - TESTE DE QR CODE E MENSAGENS
# ==========================================
# Criado: 2025-08-03
# Autor: GitHub Copilot
# Descri√ß√£o: Teste completo de funcionalidades WhatsApp

Write-Host "üì± INICIANDO TESTE DE QR CODE E MENSAGENS" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan

# Fun√ß√£o para fazer requisi√ß√µes HTTP
function Invoke-ApiRequest {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [string]$Body = $null
    )
    
    try {
        $headers = @{"Content-Type" = "application/json"}
        if ($Body) {
            return Invoke-RestMethod -Uri $Url -Method $Method -Headers $headers -Body $Body
        } else {
            return Invoke-RestMethod -Uri $Url -Method $Method -Headers $headers
        }
    } catch {
        Write-Host "‚ùå Erro na requisi√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# 1. Verificar se os servi√ßos est√£o funcionando
Write-Host "`nüîç VERIFICANDO SERVI√áOS..." -ForegroundColor Yellow
Write-Host "===========================" -ForegroundColor Yellow

# Testar API
Write-Host "üîß Testando API Backend..." -ForegroundColor Magenta
$healthCheck = Invoke-ApiRequest -Url "http://localhost:3000/health"
if ($healthCheck -and $healthCheck.success) {
    Write-Host "‚úÖ API Backend: FUNCIONANDO" -ForegroundColor Green
    Write-Host "   Status: $($healthCheck.data.status)" -ForegroundColor Cyan
    Write-Host "   Uptime: $([math]::Round($healthCheck.data.uptime / 60, 2)) minutos" -ForegroundColor Cyan
} else {
    Write-Host "‚ùå API Backend: FALHOU" -ForegroundColor Red
    return
}

# Testar Frontend
Write-Host "`nüåê Testando Frontend..." -ForegroundColor Magenta
try {
    $frontendResponse = Invoke-WebRequest -Uri "http://localhost:3001" -UseBasicParsing -TimeoutSec 5
    if ($frontendResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Frontend: FUNCIONANDO" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Frontend: FALHOU" -ForegroundColor Red
    return
}

# 2. Criar nova inst√¢ncia para teste
Write-Host "`nüì± CRIANDO INST√ÇNCIA DE TESTE..." -ForegroundColor Yellow
Write-Host "=================================" -ForegroundColor Yellow

$instanceName = "QR-Test-$(Get-Date -Format 'HHmmss')"
Write-Host "üìù Nome da inst√¢ncia: $instanceName" -ForegroundColor Cyan

$createResponse = Invoke-ApiRequest -Url "http://localhost:3000/api/instances" -Method "POST" -Body "{`"name`":`"$instanceName`"}"

if ($createResponse -and $createResponse.instance) {
    $instanceId = $createResponse.instance.id
    Write-Host "‚úÖ Inst√¢ncia criada com sucesso!" -ForegroundColor Green
    Write-Host "   ID: $instanceId" -ForegroundColor Cyan
    Write-Host "   Nome: $($createResponse.instance.name)" -ForegroundColor Cyan
    Write-Host "   Status: $($createResponse.instance.status)" -ForegroundColor Cyan
} else {
    Write-Host "‚ùå Falha ao criar inst√¢ncia" -ForegroundColor Red
    return
}

# 3. Aguardar e verificar gera√ß√£o do QR Code
Write-Host "`nüî≤ AGUARDANDO GERA√á√ÉO DO QR CODE..." -ForegroundColor Yellow
Write-Host "===================================" -ForegroundColor Yellow

$maxAttempts = 10
$attempt = 1
$qrCodeGenerated = $false

while ($attempt -le $maxAttempts -and -not $qrCodeGenerated) {
    Write-Host "üîÑ Tentativa $attempt/$maxAttempts - Verificando QR code..." -ForegroundColor Magenta
    
    Start-Sleep -Seconds 3
    
    $qrResponse = Invoke-ApiRequest -Url "http://localhost:3000/api/instances/$instanceId/qr"
    
    if ($qrResponse -and $qrResponse.qr_code -and $qrResponse.qr_code.Length -gt 100) {
        $qrCodeGenerated = $true
        Write-Host "‚úÖ QR Code gerado com sucesso!" -ForegroundColor Green
        Write-Host "   Status: $($qrResponse.status)" -ForegroundColor Cyan
        Write-Host "   Tamanho do QR: $($qrResponse.qr_code.Length) caracteres" -ForegroundColor Cyan
        Write-Host "   Formato: Base64 PNG" -ForegroundColor Cyan
        
        # Mostrar preview do QR code (primeiros 100 caracteres)
        $qrPreview = $qrResponse.qr_code.Substring(0, [Math]::Min(100, $qrResponse.qr_code.Length))
        Write-Host "   Preview: $qrPreview..." -ForegroundColor DarkCyan
        
    } elseif ($qrResponse) {
        Write-Host "‚è≥ QR Code ainda n√£o dispon√≠vel. Status: $($qrResponse.status)" -ForegroundColor Yellow
    } else {
        Write-Host "‚ö†Ô∏è  Erro ao verificar QR code" -ForegroundColor Yellow
    }
    
    $attempt++
}

if (-not $qrCodeGenerated) {
    Write-Host "‚ùå Timeout: QR Code n√£o foi gerado em tempo h√°bil" -ForegroundColor Red
    Write-Host "üí° Verifique se o WhatsApp Web est√° funcionando corretamente" -ForegroundColor Blue
    return
}

# 4. Testar endpoint p√∫blico do QR Code
Write-Host "`nüåê TESTANDO ENDPOINT P√öBLICO DO QR CODE..." -ForegroundColor Yellow
Write-Host "===========================================" -ForegroundColor Yellow

$publicQrResponse = Invoke-ApiRequest -Url "http://localhost:3000/api/instances/$instanceId/qr-public"

if ($publicQrResponse -and $publicQrResponse.qr_code) {
    Write-Host "‚úÖ Endpoint p√∫blico funcionando!" -ForegroundColor Green
    Write-Host "   Status: $($publicQrResponse.status)" -ForegroundColor Cyan
    Write-Host "   QR Code acess√≠vel publicamente" -ForegroundColor Cyan
} else {
    Write-Host "‚ö†Ô∏è  Endpoint p√∫blico pode n√£o estar funcionando" -ForegroundColor Yellow
}

# 5. Verificar todas as inst√¢ncias
Write-Host "`nüìã LISTANDO TODAS AS INST√ÇNCIAS..." -ForegroundColor Yellow
Write-Host "==================================" -ForegroundColor Yellow

$allInstances = Invoke-ApiRequest -Url "http://localhost:3000/api/instances"

if ($allInstances -and $allInstances.instances) {
    Write-Host "‚úÖ Lista de inst√¢ncias obtida com sucesso!" -ForegroundColor Green
    Write-Host "   Total de inst√¢ncias: $($allInstances.instances.Count)" -ForegroundColor Cyan
    
    foreach ($instance in $allInstances.instances) {
        $statusColor = switch ($instance.status) {
            "ready" { "Green" }
            "connecting" { "Yellow" }
            "disconnected" { "Red" }
            default { "Gray" }
        }
        
        Write-Host "   üì± $($instance.name) ($($instance.id))" -ForegroundColor White
        Write-Host "      Status: $($instance.status)" -ForegroundColor $statusColor
        Write-Host "      Criado: $($instance.created_at)" -ForegroundColor DarkCyan
    }
} else {
    Write-Host "‚ùå Falha ao listar inst√¢ncias" -ForegroundColor Red
}

# 6. Teste de prepara√ß√£o para envio de mensagens
Write-Host "`nüí¨ PREPARANDO TESTE DE MENSAGENS..." -ForegroundColor Yellow
Write-Host "===================================" -ForegroundColor Yellow

Write-Host "üìã Para testar o envio de mensagens:" -ForegroundColor Cyan
Write-Host "   1. Escaneie o QR code no WhatsApp do seu celular" -ForegroundColor White
Write-Host "   2. Aguarde a conex√£o ser estabelecida" -ForegroundColor White
Write-Host "   3. Execute o script de teste de mensagens" -ForegroundColor White

Write-Host "`nüîó URLs para teste manual:" -ForegroundColor Cyan
Write-Host "   üìä Dashboard: http://localhost:3001/dashboard/instances" -ForegroundColor White
Write-Host "   üî≤ QR Code: http://localhost:3000/api/instances/$instanceId/qr-public" -ForegroundColor White
Write-Host "   üì± API Inst√¢ncias: http://localhost:3000/api/instances" -ForegroundColor White

# 7. Aguardar conex√£o (opcional)
Write-Host "`n‚è≥ AGUARDANDO CONEX√ÉO..." -ForegroundColor Yellow
Write-Host "========================" -ForegroundColor Yellow
Write-Host "üí° Pressione Ctrl+C para pular esta etapa" -ForegroundColor Blue

$connectionWaitTime = 60 # segundos
$startTime = Get-Date

try {
    while (((Get-Date) - $startTime).TotalSeconds -lt $connectionWaitTime) {
        Start-Sleep -Seconds 5
        
        $statusCheck = Invoke-ApiRequest -Url "http://localhost:3000/api/instances/$instanceId"
        
        if ($statusCheck -and $statusCheck.status -eq "ready") {
            Write-Host "üéâ CONEX√ÉO ESTABELECIDA COM SUCESSO!" -ForegroundColor Green
            Write-Host "   Status: $($statusCheck.status)" -ForegroundColor Green
            Write-Host "   Inst√¢ncia pronta para enviar mensagens!" -ForegroundColor Green
            break
        } else {
            $elapsed = [math]::Round(((Get-Date) - $startTime).TotalSeconds)
            Write-Host "‚è≥ Aguardando conex√£o... ${elapsed}s (Status: $($statusCheck.status))" -ForegroundColor Yellow
        }
    }
} catch {
    Write-Host "`n‚èπÔ∏è  Teste interrompido pelo usu√°rio" -ForegroundColor Yellow
}

# 8. Relat√≥rio final
Write-Host "`nüìä RELAT√ìRIO FINAL DO TESTE..." -ForegroundColor Yellow
Write-Host "===============================" -ForegroundColor Yellow

$finalCheck = Invoke-ApiRequest -Url "http://localhost:3000/api/instances/$instanceId"

Write-Host "‚úÖ TESTES DE QR CODE CONCLU√çDOS!" -ForegroundColor Green
Write-Host "`nüìã Resumo dos resultados:" -ForegroundColor Cyan
Write-Host "   üîß API Backend: ‚úÖ Funcionando" -ForegroundColor White
Write-Host "   üåê Frontend: ‚úÖ Funcionando" -ForegroundColor White
Write-Host "   üì± Cria√ß√£o de Inst√¢ncia: ‚úÖ Sucesso" -ForegroundColor White
Write-Host "   üî≤ Gera√ß√£o de QR Code: ‚úÖ Sucesso" -ForegroundColor White
Write-Host "   üåê Endpoint P√∫blico: ‚úÖ Funcionando" -ForegroundColor White

if ($finalCheck -and $finalCheck.status -eq "ready") {
    Write-Host "   üîó Status da Conex√£o: ‚úÖ Conectado" -ForegroundColor Green
    Write-Host "`nüöÄ PR√ìXIMO PASSO: Teste de envio de mensagens" -ForegroundColor Green
} else {
    Write-Host "   üîó Status da Conex√£o: ‚è≥ Aguardando" -ForegroundColor Yellow
    Write-Host "`nüí° Para conectar: Escaneie o QR code em http://localhost:3001/dashboard/instances" -ForegroundColor Blue
}

Write-Host "`nüéØ TESTE DE QR CODE: CONCLU√çDO COM SUCESSO!" -ForegroundColor Green
Write-Host "ID da Inst√¢ncia para pr√≥ximos testes: $instanceId" -ForegroundColor Cyan
