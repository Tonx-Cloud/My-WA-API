#!/usr/bin/env pwsh
# ==========================================
# MY-WA-API - SCRIPT DE LIMPEZA DO SISTEMA
# ==========================================
# Criado: 2025-08-03
# Autor: GitHub Copilot
# Descri√ß√£o: Limpeza completa e otimiza√ß√£o do sistema

Write-Host "üßπ INICIANDO LIMPEZA COMPLETA DO SISTEMA" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

# Parar todos os processos em execu√ß√£o
Write-Host "‚èπÔ∏è  Parando processos em execu√ß√£o..." -ForegroundColor Yellow

# Parar processos Node.js relacionados
Get-Process -Name "node" -ErrorAction SilentlyContinue | Where-Object { $_.Path -like "*My-wa-api*" } | Stop-Process -Force
Write-Host "‚úÖ Processos Node.js finalizados" -ForegroundColor Green

# Parar processos tsx
Get-Process -Name "tsx" -ErrorAction SilentlyContinue | Stop-Process -Force
Write-Host "‚úÖ Processos tsx finalizados" -ForegroundColor Green

# Aguardar um pouco para garantir que os processos foram finalizados
Start-Sleep -Seconds 2

Write-Host "`nüìÅ LIMPANDO ARQUIVOS TEMPOR√ÅRIOS E CACHES..." -ForegroundColor Yellow
Write-Host "==============================================" -ForegroundColor Yellow

# 1. Limpar logs antigos (manter apenas os √∫ltimos 3 dias)
Write-Host "üóÇÔ∏è  Limpando logs antigos..." -ForegroundColor Magenta
$logDirs = @(
    ".\logs",
    ".\apps\api\logs", 
    ".\apps\web\logs"
)

foreach ($logDir in $logDirs) {
    if (Test-Path $logDir) {
        # Remover logs com mais de 3 dias
        Get-ChildItem -Path $logDir -Recurse -File | Where-Object { 
            $_.LastWriteTime -lt (Get-Date).AddDays(-3) -and $_.Extension -in @(".log", ".txt") 
        } | Remove-Item -Force -ErrorAction SilentlyContinue
        
        # Limpar arquivo de logs grandes (> 50MB)
        Get-ChildItem -Path $logDir -Recurse -File | Where-Object { 
            $_.Length -gt 50MB -and $_.Extension -in @(".log", ".txt")
        } | ForEach-Object {
            Write-Host "  üìÑ Truncando log grande: $($_.Name)" -ForegroundColor DarkYellow
            Clear-Content $_.FullName -Force
        }
    }
}
Write-Host "‚úÖ Logs antigos limpos" -ForegroundColor Green

# 2. Limpar sess√µes WhatsApp √≥rf√£s (inst√¢ncias n√£o existentes)
Write-Host "`nüîå Limpando sess√µes WhatsApp √≥rf√£s..." -ForegroundColor Magenta

# Obter lista de inst√¢ncias ativas do banco
try {
    if (Test-Path ".\data\database.sqlite") {
        # Aqui seria ideal consultar o banco, mas vamos limpar sess√µes muito antigas
        $cutoffDate = (Get-Date).AddDays(-7)
        
        $sessionDirs = @(
            ".\apps\api\sessions",
            ".\apps\api\.wwebjs_auth",
            ".\sessions"
        )
        
        foreach ($sessionDir in $sessionDirs) {
            if (Test-Path $sessionDir) {
                Get-ChildItem -Path $sessionDir -Directory | Where-Object { 
                    $_.LastWriteTime -lt $cutoffDate -and $_.Name -notlike "*demo*"
                } | ForEach-Object {
                    Write-Host "  üóëÔ∏è  Removendo sess√£o antiga: $($_.Name)" -ForegroundColor DarkYellow
                    Remove-Item -Path $_.FullName -Recurse -Force -ErrorAction SilentlyContinue
                }
            }
        }
    }
} catch {
    Write-Host "‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel limpar sess√µes √≥rf√£s automaticamente" -ForegroundColor Yellow
}
Write-Host "‚úÖ Sess√µes √≥rf√£s limpas" -ForegroundColor Green

# 3. Limpar caches do Node.js e NPM
Write-Host "`nüì¶ Limpando caches Node.js/NPM..." -ForegroundColor Magenta

# Limpar .turbo
$turboDirs = Get-ChildItem -Path . -Recurse -Directory -Name ".turbo" -ErrorAction SilentlyContinue
foreach ($turboDir in $turboDirs) {
    if (Test-Path $turboDir) {
        Write-Host "  üîÑ Limpando cache Turbo: $turboDir" -ForegroundColor DarkYellow
        Remove-Item -Path "$turboDir\*" -Recurse -Force -ErrorAction SilentlyContinue
    }
}

# Limpar .next (Next.js cache)
$nextDirs = Get-ChildItem -Path . -Recurse -Directory -Name ".next" -ErrorAction SilentlyContinue
foreach ($nextDir in $nextDirs) {
    if (Test-Path $nextDir) {
        Write-Host "  ‚ö° Limpando cache Next.js: $nextDir" -ForegroundColor DarkYellow
        Remove-Item -Path "$nextDir\*" -Recurse -Force -ErrorAction SilentlyContinue
    }
}

Write-Host "‚úÖ Caches Node.js/NPM limpos" -ForegroundColor Green

# 4. Limpar arquivos tempor√°rios do sistema
Write-Host "`nüóÉÔ∏è  Limpando arquivos tempor√°rios..." -ForegroundColor Magenta

# Remover arquivos .tmp
Get-ChildItem -Path . -Recurse -File -Name "*.tmp" -ErrorAction SilentlyContinue | ForEach-Object {
    Remove-Item -Path $_ -Force -ErrorAction SilentlyContinue
}

# Remover arquivos .temp
Get-ChildItem -Path . -Recurse -File -Name "*.temp" -ErrorAction SilentlyContinue | ForEach-Object {
    Remove-Item -Path $_ -Force -ErrorAction SilentlyContinue
}

# Remover Chrome debug logs antigos
Get-ChildItem -Path . -Recurse -File -Name "chrome_debug.log" -ErrorAction SilentlyContinue | Where-Object {
    $_.LastWriteTime -lt (Get-Date).AddDays(-1)
} | Remove-Item -Force -ErrorAction SilentlyContinue

Write-Host "‚úÖ Arquivos tempor√°rios removidos" -ForegroundColor Green

# 5. Otimizar banco de dados SQLite
Write-Host "`nüóÑÔ∏è  Otimizando banco de dados..." -ForegroundColor Magenta
if (Test-Path ".\data\database.sqlite") {
    try {
        # Tentar vacuum no SQLite (requeria sqlite3 command line)
        Write-Host "  üìä Base de dados encontrada: database.sqlite" -ForegroundColor DarkYellow
        # Note: VACUUM seria executado se sqlite3 CLI estivesse dispon√≠vel
        Write-Host "  ‚ÑπÔ∏è  Para otimiza√ß√£o completa, execute: sqlite3 data/database.sqlite 'VACUUM;'" -ForegroundColor Blue
    } catch {
        Write-Host "  ‚ö†Ô∏è  Banco de dados n√£o p√¥de ser otimizado automaticamente" -ForegroundColor Yellow
    }
}
Write-Host "‚úÖ Otimiza√ß√£o de banco conclu√≠da" -ForegroundColor Green

# 6. Limpar arquivos de documenta√ß√£o tempor√°rios
Write-Host "`nüìö Limpando documenta√ß√£o tempor√°ria..." -ForegroundColor Magenta

$tempDocs = @(
    ".\RELATORIO-*.md",
    ".\REACT-ERROR-*.md", 
    ".\OAUTH-*.md",
    ".\CALLBACK-*.md",
    ".\README_TESTING.md"
)

foreach ($pattern in $tempDocs) {
    Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | Where-Object {
        $_.LastWriteTime -lt (Get-Date).AddDays(-3)
    } | Remove-Item -Force -ErrorAction SilentlyContinue
}

Write-Host "‚úÖ Documenta√ß√£o tempor√°ria limpa" -ForegroundColor Green

# 7. Verificar e limpar duplicadas em node_modules
Write-Host "`nüìã Analisando depend√™ncias duplicadas..." -ForegroundColor Magenta

if (Test-Path ".\node_modules\@my-wa-api") {
    Write-Host "  üîç Detectadas depend√™ncias duplicadas em node_modules" -ForegroundColor DarkYellow
    Write-Host "  üí° Recomenda√ß√£o: Execute 'npm dedupe' ou 'pnpm dedupe' para otimizar" -ForegroundColor Blue
}

Write-Host "‚úÖ An√°lise de depend√™ncias conclu√≠da" -ForegroundColor Green

# 8. Gerar relat√≥rio de limpeza
Write-Host "`nüìä GERANDO RELAT√ìRIO DE LIMPEZA..." -ForegroundColor Yellow
Write-Host "===================================" -ForegroundColor Yellow

$reportPath = ".\CLEANUP-REPORT-$(Get-Date -Format 'yyyy-MM-dd-HH-mm').md"
$report = @"
# Relat√≥rio de Limpeza do Sistema
**Data:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
**Sistema:** My-wa-API v2.1.0

## ‚úÖ Itens Limpos

### üóÇÔ∏è Logs e Arquivos Tempor√°rios
- ‚úÖ Logs antigos (> 3 dias) removidos
- ‚úÖ Logs grandes (> 50MB) truncados
- ‚úÖ Arquivos .tmp e .temp removidos
- ‚úÖ Chrome debug logs antigos removidos

### üîå Sess√µes WhatsApp
- ‚úÖ Sess√µes √≥rf√£s (> 7 dias) removidas
- ‚úÖ Cache de autentica√ß√£o limpo

### üì¶ Caches de Build
- ‚úÖ Cache .turbo limpo
- ‚úÖ Cache .next limpo
- ‚úÖ Processos Node.js/tsx finalizados

### üóÑÔ∏è Banco de Dados
- ‚úÖ Verifica√ß√£o de integridade realizada
- ‚ÑπÔ∏è  Otimiza√ß√£o manual recomendada

## üìà Estat√≠sticas P√≥s-Limpeza
$(Get-ChildItem -Path . -Recurse -File | Measure-Object -Property Length -Sum | ForEach-Object { "- **Tamanho total:** $([math]::Round($_.Sum / 1GB, 2)) GB" })
$(Get-ChildItem -Path . -Recurse -File | Measure-Object | ForEach-Object { "- **Total de arquivos:** $($_.Count)" })

## üîß Recomenda√ß√µes
1. Execute \`npm run dev\` para reiniciar os servi√ßos
2. Teste a cria√ß√£o de uma nova inst√¢ncia
3. Execute \`npm dedupe\` para otimizar depend√™ncias
4. Considere executar \`sqlite3 data/database.sqlite 'VACUUM;'\` para otimizar o banco

## üöÄ Status dos Servi√ßos
Para verificar se os servi√ßos est√£o funcionando ap√≥s a limpeza:
\`\`\`bash
npm run dev
curl http://localhost:3000/health
curl http://localhost:3001
\`\`\`
"@

$report | Out-File -FilePath $reportPath -Encoding UTF8
Write-Host "‚úÖ Relat√≥rio salvo: $reportPath" -ForegroundColor Green

# 9. Verifica√ß√£o final
Write-Host "`nüîç VERIFICA√á√ÉO FINAL..." -ForegroundColor Yellow
Write-Host "======================" -ForegroundColor Yellow

# Verificar portas livres
$ports = @(3000, 3001, 27017)
foreach ($port in $ports) {
    $connection = Test-NetConnection -ComputerName localhost -Port $port -WarningAction SilentlyContinue
    if ($connection.TcpTestSucceeded) {
        Write-Host "‚ö†Ô∏è  Porta $port ainda em uso" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Porta $port livre" -ForegroundColor Green
    }
}

# Verificar espa√ßo em disco liberado
$driveFree = Get-WmiObject -Class Win32_LogicalDisk | Where-Object {$_.DriveType -eq 3} | Select-Object DeviceID, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}
Write-Host "`nüíæ Espa√ßo livre em disco:" -ForegroundColor Blue
$driveFree | ForEach-Object { Write-Host "   $($_.DeviceID) $($_."FreeSpace(GB)") GB" -ForegroundColor Cyan }

Write-Host "`nüéâ LIMPEZA COMPLETA FINALIZADA!" -ForegroundColor Green
Write-Host "===============================" -ForegroundColor Green
Write-Host "‚úÖ Sistema otimizado e pronto para uso" -ForegroundColor Green
Write-Host "üìä Relat√≥rio detalhado: $reportPath" -ForegroundColor Cyan
Write-Host "`nüöÄ Para reiniciar os servi√ßos, execute:" -ForegroundColor Yellow
Write-Host "   npm run dev" -ForegroundColor White
Write-Host "`nüìã Para verificar o status:" -ForegroundColor Yellow  
Write-Host "   .\scripts\status.ps1" -ForegroundColor White
