version: '3.8'

# Docker Compose para produção - My-WA-API
# Configuração completa com todos os serviços necessários

services:
  # Aplicação principal
  my-wa-api:
    build:
        # Aplicação Web (Frontend)
  my-wa-web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.simple
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=${API_BASE_URL:-http://localhost:3000}
    image: my-wa-web:${VERSION:-latest}
    container_name: my-wa-api-web
    container_name: my-wa-api-app
    restart: unless-stopped
    
    # Configurações de ambiente
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      TZ: America/Sao_Paulo
      
      # Configurações da aplicação
      API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
      WEB_BASE_URL: ${WEB_BASE_URL:-http://localhost:3001}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # Configurações de banco de dados
      DATABASE_URL: ${DATABASE_URL:-}
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-mywaapi}
      DB_USER: ${DB_USER:-mywaapi}
      DB_PASS: ${DB_PASS:-}
      
      # Configurações de Redis
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-0}
      
      # Configurações de WhatsApp
      WHATSAPP_SESSION_PATH: /app/sessions
      WHATSAPP_WEBHOOK_URL: ${WHATSAPP_WEBHOOK_URL:-}
      
      # Configurações de segurança
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      
      # Configurações de monitoramento
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_TRACING: ${ENABLE_TRACING:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Configurações de backup
      BACKUP_ENABLED: ${BACKUP_ENABLED:-true}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    
    # Portas expostas
    ports:
      - "${API_PORT:-3000}:3000"
    
    # Volumes para persistência
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./sessions:/app/sessions
      - ./uploads:/app/uploads
      - backups_volume:/app/backups
    
    # Verificação de saúde
    healthcheck:
      test: ["CMD", "node", "/app/docker/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Dependências
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Configurações de rede
    networks:
      - my-wa-api-network
    
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: unless-stopped
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Labels para organização
    labels:
      - "app=my-wa-api"
      - "component=api"
      - "environment=production"
      - "version=${VERSION:-latest}"

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: my-wa-api-postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${DB_NAME:-mywaapi}
      POSTGRES_USER: ${DB_USER:-mywaapi}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
      TZ: America/Sao_Paulo
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    ports:
      - "${DB_PORT_EXTERNAL:-5432}:5432"
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mywaapi} -d ${DB_NAME:-mywaapi}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    networks:
      - my-wa-api-network
    
    labels:
      - "app=my-wa-api"
      - "component=database"
      - "environment=production"

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: my-wa-api-redis
    restart: unless-stopped
    
    environment:
      TZ: America/Sao_Paulo
    
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 0
    
    volumes:
      - redis_data:/data
    
    ports:
      - "${REDIS_PORT_EXTERNAL:-6379}:6379"
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    networks:
      - my-wa-api-network
    
    labels:
      - "app=my-wa-api"
      - "component=cache"
      - "environment=production"

  # Aplicação Web (Frontend)
  my-wa-web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=${API_BASE_URL:-http://localhost:3000}
    image: my-wa-web:${VERSION:-latest}
    container_name: my-wa-api-web
    restart: unless-stopped
    
    environment:
      NODE_ENV: production
      PORT: 3001
      TZ: America/Sao_Paulo
      NEXT_PUBLIC_API_URL: ${API_BASE_URL:-http://localhost:3000}
      NEXTAUTH_URL: ${WEB_BASE_URL:-http://localhost:3001}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    
    ports:
      - "${WEB_PORT:-3001}:3001"
    
    volumes:
      - ./logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    depends_on:
      - my-wa-api
    
    networks:
      - my-wa-api-network
    
    labels:
      - "app=my-wa-api"
      - "component=web"
      - "environment=production"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: my-wa-api-nginx
    restart: unless-stopped
    
    environment:
      TZ: America/Sao_Paulo
    
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    
    depends_on:
      - my-wa-api
      - my-wa-web
    
    networks:
      - my-wa-api-network
    
    labels:
      - "app=my-wa-api"
      - "component=proxy"
      - "environment=production"

  # Monitor de sistema (Opcional)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: my-wa-api-watchtower
    restart: unless-stopped
    
    environment:
      TZ: America/Sao_Paulo
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_POLL_INTERVAL: 86400 # 24 horas
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_REVIVE_STOPPED: "false"
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    
    networks:
      - my-wa-api-network
    
    labels:
      - "app=my-wa-api"
      - "component=monitor"
      - "environment=production"
    
    profiles:
      - monitoring

# Volumes nomeados para persistência
volumes:
  postgres_data:
    driver: local
    labels:
      - "app=my-wa-api"
      - "component=database"
  
  redis_data:
    driver: local
    labels:
      - "app=my-wa-api"
      - "component=cache"
  
  backups_volume:
    driver: local
    labels:
      - "app=my-wa-api"
      - "component=backup"

# Rede personalizada
networks:
  my-wa-api-network:
    driver: bridge
    labels:
      - "app=my-wa-api"
      - "environment=production"
