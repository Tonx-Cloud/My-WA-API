# Dockerfile otimizado para produção
FROM node:20-alpine AS builder

# Instalar dependências do sistema
RUN apk add --no-cache python3 make g++ git

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de configuração
COPY package*.json ./
COPY turbo.json ./
COPY tsconfig.json ./

# Copiar workspaces
COPY packages/ ./packages/
COPY apps/api/package*.json ./apps/api/

# Instalar dependências
RUN npm ci --frozen-lockfile

# Copiar código fonte da API
COPY apps/api/ ./apps/api/

# Build da aplicação
RUN npm run build --workspace=@my-wa-api/api

# Estágio de produção
FROM node:20-alpine AS production

# Criar usuário não-root para segurança
RUN addgroup -g 1001 -S nodejs && \
    adduser -S mywaapi -u 1001

# Instalar dependências de runtime
RUN apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata

# Definir timezone
ENV TZ=America/Sao_Paulo

# Criar diretórios necessários
RUN mkdir -p /app/logs /app/data /app/sessions /app/backups && \
    chown -R mywaapi:nodejs /app

# Definir diretório de trabalho
WORKDIR /app

# Copiar package files
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/turbo.json ./
COPY --from=builder /app/apps/api/package*.json ./apps/api/

# Instalar apenas dependências de produção
RUN npm ci --omit=dev --frozen-lockfile && \
    npm cache clean --force

# Copiar aplicação compilada
COPY --from=builder /app/apps/api/dist ./apps/api/dist
COPY --from=builder /app/packages ./packages

# Copiar arquivos de configuração
COPY apps/api/ecosystem.config.js ./apps/api/
COPY docker/healthcheck.js ./
COPY docker/entrypoint.sh ./

# Configurar permissões
RUN chmod +x entrypoint.sh && \
    chown -R mywaapi:nodejs /app

# Expor porta
EXPOSE 3000

# Configurar usuário
USER mywaapi

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD node healthcheck.js

# Usar dumb-init para gerenciamento de processos
ENTRYPOINT ["dumb-init", "--"]

# Comando de inicialização
CMD ["./entrypoint.sh"]
