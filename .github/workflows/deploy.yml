name: 🚀 Deploy My-WA-API

# Configuração de triggers - Separação clara entre build automático e deploy manual
on:
  push:
    branches: [main, production]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: Target environment
        required: true
        default: staging
        type: choice
        options:
          - staging
          - production
      service:
        description: Service to deploy
        required: true
        default: both
        type: choice
        options:
          - api
          - web
          - both
      version:
        description: Version to deploy
        required: true
        default: latest
        type: string

# Permissões mínimas necessárias (CKV2_GHA_1)
permissions:
  contents: read
  packages: write
  id-token: write

# Variáveis globais
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: 22

# Jobs do pipeline
jobs:
  # Job de testes - Independente dos inputs (CKV_GHA_7)
  test:
    name: 🧪 Testes e Qualidade
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20, 22]

    steps:
      - name: 📦 Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: 📥 Instalar dependências
        run: |
          npm ci
          cd apps/api && npm ci
          cd ../web && npm ci
          cd ../../packages/shared && npm ci

      - name: 🔍 Lint e formatação
        run: |
          npm run lint
          npm run format:check

      - name: 🧪 Executar testes unitários
        run: |
          npm run test:coverage
        env:
          NODE_ENV: test

      - name: 📊 Upload cobertura para Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: 🔒 Auditoria de segurança
        run: |
          npm audit --audit-level=moderate
          cd apps/api && npm audit --audit-level=moderate
          cd ../web && npm audit --audit-level=moderate

  # Job de build - Independente dos inputs, só depende dos testes (CKV_GHA_7)
  build:
    name: 🏗️ Build Imagens Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    outputs:
      image-api: ${{ steps.meta-api.outputs.tags }}
      image-web: ${{ steps.meta-web.outputs.tags }}
      digest-api: ${{ steps.build-api.outputs.digest }}
      digest-web: ${{ steps.build-web.outputs.digest }}

    steps:
      - name: 📦 Checkout código
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js para build
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📥 Instalar dependências
        run: npm ci

      - name: 🏗️ Build aplicação
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🏗️ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login no Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extrair metadados - API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 📋 Extrair metadados - Web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build e Push - API
        id: build-api
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile.production
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ fromJSON(steps.meta-api.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta-api.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: 🏗️ Build e Push - Web
        id: build-web
        uses: docker/build-push-action@v6
        with:
          context: ./apps/web
          file: ./apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  # Job de análise de segurança
  security:
    name: 🔒 Análise de Segurança
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
      - name: 📦 Checkout código
        uses: actions/checkout@v4

      - name: 🔍 Executar Trivy - API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-api }}
          format: sarif
          output: trivy-api-results.sarif

      - name: 🔍 Executar Trivy - Web
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-web }}
          format: sarif
          output: trivy-web-results.sarif

      - name: 📊 Upload resultados Trivy para GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .

  # Job de deploy para staging
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging

    steps:
      - name: 📦 Checkout código
        uses: actions/checkout@v4

      - name: 🔐 Configurar SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: 🚀 Deploy para staging
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/my-wa-api
            git pull origin main
            export VERSION=${{ github.sha }}
            export API_IMAGE=${{ needs.build.outputs.image-api }}
            export WEB_IMAGE=${{ needs.build.outputs.image-web }}
            ./scripts/deploy.sh deploy
          EOF

      - name: 🔍 Verificar deploy
        env:
          API_URL: ${{ secrets.STAGING_API_URL }}
          WEB_URL: ${{ secrets.STAGING_WEB_URL }}
        run: |
          sleep 60
          curl --silent --fail "$API_URL/health" --output /dev/null
          curl --silent --fail "$WEB_URL" --output /dev/null

  # Job de deploy para produção
  deploy-production:
    name: 🚀 Deploy Produção
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: |
      (startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production

    steps:
      - name: 📦 Checkout código
        uses: actions/checkout@v4

      - name: 🔐 Configurar SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: 📊 Criar backup antes do deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/my-wa-api
            ./scripts/deploy.sh backup
          EOF

      - name: 🚀 Deploy para produção
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/my-wa-api
            git fetch origin
            git checkout ${{ github.ref_name }}
            export VERSION=${{ github.ref_name }}
            export API_IMAGE=${{ needs.build.outputs.image-api }}
            export WEB_IMAGE=${{ needs.build.outputs.image-web }}
            ./scripts/deploy.sh deploy
          EOF

      - name: 🔍 Verificar deploy
        env:
          API_URL: ${{ secrets.PRODUCTION_API_URL }}
          WEB_URL: ${{ secrets.PRODUCTION_WEB_URL }}
        run: |
          sleep 120
          curl --silent --fail "$API_URL/health" --output /dev/null
          curl --silent --fail "$WEB_URL" --output /dev/null

      - name: 📢 Notificação de sucesso
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🎉 Deploy de produção concluído com sucesso!
            Versão: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job de limpeza - Executa sempre após os deploys
  cleanup:
    name: 🧹 Limpeza
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: 🧹 Limpar imagens antigas - API
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.repository }}-api
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

      - name: 🧹 Limpar imagens antigas - Web
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.repository }}-web
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
