name: Full Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Tipo de teste a executar'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - performance
          - security

env:
  NODE_VERSION: '22.x'
  CI: true

jobs:
  validate-system:
    name: 🔍 Validar Sistema de Testes
    runs-on: ubuntu-latest
    outputs:
      system-valid: ${{ steps.validate.outputs.valid }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Validate test system
        id: validate
        run: |
          npm run validate-tests
          echo "valid=true" >> $GITHUB_OUTPUT

  unit-tests:
    name: 🧪 Testes Unitários
    runs-on: ubuntu-latest
    needs: validate-system
    if: needs.validate-system.outputs.system-valid == 'true'
    
    strategy:
      matrix:
        component: ['api', 'web']
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests - ${{ matrix.component }}
        run: |
          cd apps/${{ matrix.component }}
          npm run test:ci

      - name: 📊 Upload coverage to Codecov
        if: matrix.component == 'api'
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/${{ matrix.component }}/coverage/lcov.info
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage

  integration-tests:
    name: 🔗 Testes de Integração
    runs-on: ubuntu-latest
    needs: [validate-system, unit-tests]
    if: needs.validate-system.outputs.system-valid == 'true'
    
    services:
      api:
        image: node:22-alpine
        ports:
          - 3000:3000
        options: --health-cmd="wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🚀 Start services
        run: |
          npm run build:api
          npm run start:api &
          sleep 10

      - name: 🔗 Run integration tests
        run: |
          cd apps/api
          npm run test -- --testNamePattern="integration|Integration" --ci

      - name: 🏥 Health checks
        run: |
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:3000/health/live || exit 1
          curl -f http://localhost:3000/health/ready || exit 1

  performance-tests:
    name: ⚡ Testes de Performance
    runs-on: ubuntu-latest
    needs: [validate-system, unit-tests]
    if: needs.validate-system.outputs.system-valid == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🚀 Start services
        run: |
          npm run build:api
          npm run start:api &
          sleep 10

      - name: ⚡ Run performance tests
        run: |
          cd apps/api
          npm run test -- --testNamePattern="performance|Performance|timing|load" --ci

      - name: 📊 Performance benchmarks
        run: |
          echo "=== Performance Benchmarks ==="
          for i in {1..5}; do
            echo "Iteration $i:"
            time curl -s http://localhost:3000/health > /dev/null
            time curl -s http://localhost:3000/api/dashboard/stats > /dev/null
          done

  security-tests:
    name: 🔒 Testes de Segurança
    runs-on: ubuntu-latest
    needs: [validate-system, unit-tests]
    if: needs.validate-system.outputs.system-valid == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🚀 Start services
        run: |
          npm run build:api
          npm run start:api &
          sleep 10

      - name: 🔒 Run security tests
        run: |
          cd apps/api
          npm run test -- --testNamePattern="security|Security|auth|Auth|validation" --ci

      - name: 🛡️ Security audit
        run: npm audit --audit-level=moderate

  full-test-suite:
    name: 🎯 Execução Completa
    runs-on: ubuntu-latest
    needs: [validate-system]
    if: needs.validate-system.outputs.system-valid == 'true' && github.event.inputs.test_type == 'all'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🚀 Start services
        run: |
          npm run build:api
          npm run start:api &
          npm run build:web
          npm run start:web &
          sleep 15

      - name: 🎯 Run full test suite
        run: npm run full-test

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            logs/
            coverage/
            apps/*/coverage/
          retention-days: 30

      - name: 📋 Generate test report
        if: always()
        run: |
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "logs/test-results-*.json" ]; then
            echo "### 📈 Metrics" >> $GITHUB_STEP_SUMMARY
            node -e "
              const fs = require('fs');
              const files = fs.readdirSync('logs').filter(f => f.startsWith('test-results-'));
              if (files.length > 0) {
                const results = JSON.parse(fs.readFileSync('logs/' + files[0], 'utf8'));
                console.log('| Metric | Value |');
                console.log('|--------|--------|');
                console.log('| Total Tests | ' + results.summary.totalTests + ' |');
                console.log('| Passed | ' + results.summary.totalPassed + ' |');
                console.log('| Failed | ' + results.summary.totalFailed + ' |');
                console.log('| Success Rate | ' + results.summary.successRate + '% |');
                console.log('| Duration | ' + (results.summary.totalDuration / 1000).toFixed(2) + 's |');
                console.log('| Health Checks | ' + results.summary.healthChecksPerformed + ' |');
              }
            " >> $GITHUB_STEP_SUMMARY
          fi

  notify-results:
    name: 📢 Notificar Resultados
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests]
    if: always()
    
    steps:
      - name: 📊 Calculate overall status
        id: status
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.performance-tests.result }}" == "success" && 
                "${{ needs.security-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Todos os testes passaram com sucesso!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Alguns testes falharam. Verifique os logs para detalhes." >> $GITHUB_OUTPUT
          fi

      - name: 📢 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { status, message } = ${{ toJSON(steps.status.outputs) }};
            const comment = `
            ## 🧪 Resultados dos Testes Automatizados
            
            ${message}
            
            ### 📋 Resumo por Categoria:
            - **Unitários**: ${{ needs.unit-tests.result }}
            - **Integração**: ${{ needs.integration-tests.result }}
            - **Performance**: ${{ needs.performance-tests.result }}
            - **Segurança**: ${{ needs.security-tests.result }}
            
            ### 🔗 Links Úteis:
            - [Ver logs completos](${context.payload.pull_request.html_url}/checks)
            - [Documentação de testes](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/TESTING.md)
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
